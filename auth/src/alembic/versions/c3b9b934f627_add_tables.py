"""add tables

Revision ID: c3b9b934f627
Revises: 
Create Date: 2022-09-10 22:55:30.699224

"""
import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from sqlalchemy.sql import text

# revision identifiers, used by Alembic.
revision = "c3b9b934f627"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "permissions",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("name", sa.String(length=128), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_permissions_name"), "permissions", ["name"], unique=True)
    op.create_table(
        "roles",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("name", sa.String(length=64), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_roles_name"), "roles", ["name"], unique=True)
    op.create_table(
        "roles_permissions",
        sa.Column("permission_id", sa.Integer(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.PrimaryKeyConstraint("permission_id", "role_id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.Column("email", sa.String(length=80), nullable=False),
        sa.Column("password", sqlalchemy_utils.types.password.PasswordType(max_length=1137), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_table(
        "login_history",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("ip_address", sqlalchemy_utils.types.ip_address.IPAddressType(length=50), nullable=True),
        sa.Column("login_time", sa.DateTime(), nullable=True),
        sa.Column("user_agent", sa.Text(), nullable=True),
        sa.Column("user_device_type", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id", "user_device_type"),
        sa.UniqueConstraint("id", "user_device_type"),
        postgresql_partition_by="LIST (user_device_type)",
    )
    op.get_bind().execute(
        text(
            """CREATE TABLE IF NOT EXISTS login_history_desktop PARTITION OF login_history FOR VALUES IN ('desktop')"""
        )
    )
    op.get_bind().execute(
        text("""CREATE TABLE IF NOT EXISTS login_history_mobile PARTITION OF login_history FOR VALUES IN ('mobile')""")
    )
    op.execute(sa.schema.CreateSequence(sa.Sequence("login_history_id")))
    op.get_bind().execute(
        text("""ALTER TABLE login_history ALTER COLUMN id SET DEFAULT nextval('login_history_id'::regclass)""")
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("login_history")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_table("roles_permissions")
    op.drop_index(op.f("ix_roles_name"), table_name="roles")
    op.drop_table("roles")
    op.drop_index(op.f("ix_permissions_name"), table_name="permissions")
    op.drop_table("permissions")
    # ### end Alembic commands ###
